Unit Test Fundamentals
    It's not a unit test if it uses...
        the filesystem
        a Database
        the Network
    The three parts of a test
        Arrange
            Set up the object to be tested and collaborators
        Act
            Exercise the unit under test
        Assert
            Make claims about what happened
    unittest - docs: https://docs.python.org/3/library/unittest.html
    Regression = Something that used to work and no longer does
    Limitations of unit test
        Hard to write if units have many dependencies
        Test scenarios may not occur in production
        Tests may not notice failures
        Unit tests do not find integrations or non-functional problems
    Test-Last process
        Tests come after code
            Write Code -> Write Tests
        Test when design is stable
        Risks of untestable design
        Discover bugs later
        Tests are rushed
    Test-First process
        Design sketch -> Write all tests -> Write all code
        Design is testable
        Hard to predict all cases
        You will end up iterating
    Test-Driven development
        Write onde test -> Make it pass -> Refactor (REPEAT)
        Unfamiliar way of working
        Takes discipline
        Refactoring takes skill
    Tests Support Collaboration
        1. Pull changes from version control
        2. Run the tests and check they pass before changing code
        3. Run the tests again before sharing your changes
    Build automation server
        1. Detects changes from version control, fetches them
        2. Build the code & runs the tests
        3. Communicates the result to developers
        4. If passing tests - deploys to manual testing environment
    Continuous Integration
        https://www.martingfowler.com/articles/continuousIntegration.html
Unit Testing with pytest
    unittest is based on JUnit
    pytest
        Popular alternative to unittest
        It is not a member of the xUnit family
        It is not in the standard Python distribution
        doc.pytest.org
    How to run
        $ python3 -m pytest
    Get fixtures
        $ pytest --fixtures
    Skip slow tests
        $ python -m pytest -m "not slow"
    Get list of markers
        $ python -m pytest --markers
    Plugins
        pytest-html
            https://pypi.org/project/pytest-html
            $ python -m pytest --html=report.html
Testable Documentation with doctest
    Use Cases for doctest
        'docstring' maintenance
            Keep it synchronised with the code
        Regression Testing
            Similar to unittest or pytest
        Tutorial documentation
            For when you publish a python library
    Docstrings are comments in the code that document how to use a module, class or function
        doctest helps you keep them up to date
        https://docs.python.org/3/library/doctest.html
    Run the doctest
        $ python -m doctest yatzy.py -v
        $ python -m pytest --doctest-modules
    Run the doctest ignoring exception details
        $ python -m pytest --doctest-modules -o doctest_optionflags=IGNORE_EXCEPTION_DETAIL
    Run regression test in tutorial documentation
        $  python -m pytest --doctest-modules --doctest-glob='*.rst'
Using Test Doubles
    Kinds of test Doubles
        Stub
            Looks good from the outside
            Contains nothing except what you put there
            Will not fail the test
        Spy
            Can fail the test if it's not called correctly
            Looks good from the outside
            Records the method calls it receives
        Mock
            Can fail the test if it's not called correctly
            Looks good from the outside
            Expect certain method calls, otherwise raise an error
        Fake object
            Looks good from the outside
            Has an implementation with logic and behaviour
            Common things to replace with a Fake
                File
                    Replace with StringIO
                Database
                    Replace with in-memory database
                WebServer
                    Replace with lightweight WebServer
        Dummy
            Pass a default value to specific param
            It doesn't matter what it looks like
            A dummy is not used
            Usually None
    Three kinds of asserts
        Return value or an exception
        State change
            Use an API to query the new state
        Method call
            Did a specific method get called on a collaborator
    Test Doubles from two groups
        Replace inconvenient collaborators
            Dummy
            Stub
            Fake
        Ensure interactios are correct
            Spy
            Mock
    Monkey Patching
        Collaborators is difficult to replace
        Dinamically change code during runtime
Parameterised Tests & Test Coverage
    Parameterised Testing
        Some function or method
        Different parameters
        More coverage
    Measuring Test Coverage
        $ pip install coverage
        $ pip install pytest-cov
        
        To run with unittest
            $ python -m coverage run -m unittest
            $ python -m coverage html
        To run with pytest
            $ python -m pytest --cov-report html:cov_html --cov=tennis .
            $ python -m pytest --cov-report html:cov_html --cov-branch --cov=tennis .

        Use branch coverage
        100% coverage is no guarantee